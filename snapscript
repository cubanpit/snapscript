#!/bin/bash

##
# This script should make read-only snapshot of desired btrfs subvolumes, and
#  should also help to keep the subvolume list clean asking to remove old and
#  unuseful snapshot.
# PAY ATTENTION: this script is tested on a single system, it should work
#  correctly if you've done snapshot only through this script, but it's not 100%
#  secure.
# Read all outputs carefully before proceeding!
#
# Written by cubanpit at github.
##

#
# TODO:
#  - write a 'easier to read' and 'more flexible' code;
#  - add some keyword for frequency, like 'daily', 'weekly' and 'monthly';
#


##
## CONFIGURATION (touch it)
##

# Subvolumes to backup (it's a bash array, spaces are separators)
declare -ar SUBVS=(ROOT HOME)
# Default number of snapshots to keep (same order of previous array)
declare -air NDEFS=(10 3)
# Default frequency in seconds (1d=86400s, 7d=604800s, 30d=2592000s)(same order)
declare -air FREQS=(200 604800)

# Btrfs volume/partition path
declare -r FSPART="/dev/sdb"

# Path for btrfs volume mount
declare -r ROOTFS="/mnt/rootfs/"


##
## SCRIPT (don't touch it)
##

# If user is not root, then you need 'sudo'
if [[ "$(id -u)" = "0" ]]
then
	SUDO=""
else
	SUDO="sudo"
fi


##
# FUNCTIONS:
##

# DO_SNAPSHOT
# This function actually take snapshots using btrfs-progs utility
do_snapshot () {
echo
echo "I'll take a snapshot in $ROOTFS$SUBVOL$($DATE)."
echo -n "Do you want to continue (this cannot be undone) [y/N]? "
read -r sure

if [[ $sure = "y" ]]
then
	$SUDO btrfs subvolume snapshot -r "$ROOTFS$SUBVOL" \
		"$ROOTFS$SUBVOL$($DATE)"
	echo "[Snapshot executed]"
else
	echo "[Snapshot not executed]"
fi
}

# UNMOUNT_VOL
# This function allow to unmount the device before exit
unmount_vol () {
ERR=$1
if (! mountpoint -q $ROOTFS)
then
	echo
	exit "$ERR"
else
	echo
	echo -n "Do you want to unmount $FSPART from $ROOTFS [y/N]? "
	read -r sure
	if [[ $sure = "y" ]]
	then
		$SUDO umount $ROOTFS
		echo "[Volume unmounted]"
		echo
		exit "$ERR"
	else
		echo "[Volume not unmounted]"
		echo
		exit "$ERR"
	fi
fi
}

# CHECK_SUBVOLUME
# This function will check existent subvolume with different method,
#  printing them asking the user to check.
check_subvolume () {

# Print a list with Btrfs utility
echo "This a list of subvolumes in your btrfs filesystem:"
$SUDO btrfs subvolume list $ROOTFS -t
echo

# Print a list with manual method, easy to filter
echo "This is a list of subvolumes of interest:"
find $ROOTFS "$ROOTFS$SUBVOL"_* -maxdepth 0 | grep "$SUBVOL" | tail -n +1
echo
echo -e "\033[1;4;5;31mCheck the previous list!\033[0m"
echo -e "\033[1;31mThere should be all and only snapshots of $SUBVOL" \
	"subvolume, otherwise this script could delete important subvolumes."
echo -e "\033[0m"

# Total number of subvolume snapshot
NSUBV=$(find $ROOTFS "$ROOTFS$SUBVOL"_* -maxdepth 0 | grep "$SUBVOL" | \
	tail -n +1 | wc -l)
echo "You have totally $NSUBV snapshots of $SUBVOL subvolume."
ANS=$(( NSUBV + 1 ))
while [[ $ANS -gt $NSUBV ]]
do
	echo -n "How many old snapshot do you want to keep [default=$NDEF]? "
	read -r ANS
	if [[ -z $ANS ]]
	then
		if [[ $NDEF -gt $NSUBV ]]
		then
			ANS=$NSUBV
		else
			ANS=$NDEF
		fi
	fi
	if [[ $ANS -gt $NSUBV ]]
	then
		echo
		echo "ERRROR: You can't keep $ANS snapshots if there are only $NSUBV!"
	else
		if [[ $ANS -eq $NSUBV ]]
		then
			echo
			echo "You want to keep $ANS of $NSUBV snapshots, so there is" \
				"nothing to be done."
			echo "[Snapshot(s) not deleted]"
			stop_it 0
		fi
	fi
done
echo

# Recursively delete all unuseful subvolume
for (( i=0; i < $(( NSUBV - ANS )); i++ ))
do
	TARGET=$(find $ROOTFS "$ROOTFS$SUBVOL"_* -maxdepth 0 | grep "$SUBVOL" | \
		tail -n +1 | head -n 1)
	echo -n "Do you really want to DEFINITELY delete $TARGET subvolume"\
		"(this cannot be undone) [y/N]? "
	read -r sure
	if [[ $sure = "y" ]]
	then
		$SUDO btrfs subvolume delete "$TARGET"
		echo "[Snapshot deleted]"
		echo
	else
		echo "[Snapshot(s) not deleted]"
		echo
	fi
done
}

# RUN
# The main function that runs all the stuff
run () {
# Variables for this single run
SUBVOL=$1
NDEF=$2
FREQ=$3

# Check if the block device exist
if [[ ! -b $FSPART ]]
then
	echo
	echo "[Volume does not exist]"
	echo "There is no $FSPART volume in this system. Try changing FSPART"\
		"parameter in the head this script file."
	echo
	exit 1
fi

# Check if something is mounted on the mountpoint
if (! mountpoint -q $ROOTFS)
then
	echo
	echo -n "There is no volume mounted at $ROOTFS , do you want to mount"\
		"now $FSPART at $ROOTFS [y/N]? "
	read -r sure
	if [[ $sure = "y" ]]
	then
		$SUDO mount $FSPART $ROOTFS
		echo "[Volume mounted]"
	else
		echo "[Volume not mounted]"
		echo "If volume is not mounted, you can't do anything with subvolumes."
		echo
		exit 1
	fi
fi

# Check if the subvolume exist
if [[ ! -d $ROOTFS$SUBVOL ]]
then
	echo "[Subvolume does not exist]"
	echo "There is no $SUBVOL subvolume in $FSPART. Try changing SUBVOL"\
		"or FSPART parameters in the head of this script file."
	echo
	unmount_vol 1
fi

# Check the age of last snapshot
AGE=$(find $ROOTFS "$ROOTFS$SUBVOL"_* -maxdepth 0 | grep "$SUBVOL" | tail -n 1 )
AGE=${AGE##*_}
# Simple check on the name of snapshot, for backward compatibility
if [[ $AGE =~ ^[0-9]+$ && $AGE -le $(date +%s) ]]
then
	AGE=$(( $(date +%s) - AGE ))
	old=1
else
	echo -e "\nYour previous snapshot is made with a previous version of"\
		"this script, you can take a snapshot but you can't have age control,"\
		"at least for this run. Pay attention when this script check old"\
		"snapshots."
	old=0
fi

# Take the snapshot if there isn't a subvolume with the same name or if last
#  snapshot isn't old enough
if [[ -d $ROOTFS$SUBVOL$($DATE) ]]
then
	echo -e "\nYou have already done a snapshot of $SUBVOL subvolume with a"\
		"time string like $($DATE), just wait a second."
elif [[ $old -eq 1 && $AGE -lt $FREQ ]]
then
	WAIT=$(( FREQ - AGE ))
	echo -e "\nYou have to wait $WAIT seconds before another $SUBVOL snapshot."\
		"If you want to make snapshot of this subvolume more frequently,"\
		"change configurations in the head of this script file."
else
	do_snapshot
fi

echo

# Check previous snapshot and eventually delete some of them
echo -n "Do you want to check old snapshots [y/N]? "
read -r sure
if [[ $sure = "y" ]]
then
	check_subvolume
else
	echo "[Check not executed]"
fi
}

# STOP_IT
# Stop function, just to be sure that you can always run it for every
#  subvolume you desire, to exit it calls unmount_vol, with error code.
stop_it () {
ERR=$1
if [[ -z $j || j -eq ${#SUBVS[@]} ]]
then
	unmount_vol "$ERR"
fi
}

# CHECK CONFIGURATIONS
# This function will check if you have the same number of subvolumes,
#  frequencies and 'number of copy to keep'.
# It also check if some frequency or some 'number of copy to keep' is null.
check_config () {
if [[ ${#SUBVS[@]} -ne ${#NDEFS[@]} ||\
	  ${#SUBVS[@]} -ne ${#FREQS[@]} ]]
then
	echo -e "\nYou have different array size, so you have wrong configuration."\
		"Check the head of this script file for configurations."
	stop_it 1
fi
for (( i=0 ; i<${#NDEFS[@]} ; i++ ))
do
	if [[ ${NDEFS[i]} -eq "0" ]]
	then
		echo -e "\nThere is a 0 in some configuration, check the head of this"\
			"script file."
		stop_it 1
	fi
done
for (( i=0 ; i<${#FREQS[@]} ; i++ ))
do
	if [[ ${FREQS[i]} -eq "0" ]]
	then
		echo -e "\nThere is a 0 in some configuration, check the head of this"\
			"script file."
		stop_it 1
	fi
done
}


# MAIN
# This part launches everything if you have configured subvolumes

check_config

DATE="date +_%Y-%m-%d_%s"

for (( j=0 ; j<${#SUBVS[@]} ; j++ ))
do
	run "${SUBVS[j]}" "${NDEFS[j]}" "${FREQS[j]}"
done

stop_it 0
